// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`compile > hello world > script 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { ref } from 'vue'


export default /*#__PURE__*/_defineComponent({
  props: {
    msg: { type: String, required: true }
  },
  setup(__props: any, { expose: __expose }) {
  __expose();



const count = ref(0)

function inc() {
  count.value++
}

const __returned__ = { count, inc }
Object.defineProperty(__returned__, '__isScriptSetup', { enumerable: false, value: true })
return __returned__
}

})"
`;

exports[`compile > hello world > style 1`] = `
"
.read-the-docs {
  color: #888;
}
"
`;

exports[`compile > hello world > template 1`] = `
"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createElementBlock as _createElementBlock, withDirectives as _withDirectives, Fragment as _Fragment } from "vue"

const _hoisted_1 = { class: "card" }

export function render(_ctx, _cache) {
  const _directive_throttle = _resolveDirective("throttle")

  return (_openBlock(), _createElementBlock(_Fragment, null, [
    _createElementVNode("h1", null, _toDisplayString(_ctx.msg), 1 /* TEXT */),
    _createElementVNode("div", _hoisted_1, [
      _withDirectives((_openBlock(), _createElementBlock("button", {
        type: "button",
        onClick: _cache[0] || (_cache[0] = $event => (_ctx.count++)),
        onDblclick: _cache[1] || (_cache[1] = $event => (_ctx.count += 2))
      }, [
        _createTextVNode(" raw count is " + _toDisplayString(_ctx.count), 1 /* TEXT */)
      ], 32 /* NEED_HYDRATION */)), [
        [_directive_throttle]
      ]),
      _withDirectives((_openBlock(), _createElementBlock("button", {
        type: "button",
        onClick: _cache[2] || (_cache[2] = (...args) => (_ctx.inc && _ctx.inc(...args)))
      }, [
        _createTextVNode(" inc count is " + _toDisplayString(_ctx.count), 1 /* TEXT */)
      ])), [
        [_directive_throttle]
      ])
    ])
  ], 64 /* STABLE_FRAGMENT */))
}"
`;

exports[`compile > hello world use plugin > script 1`] = `
"import { defineComponent as _defineComponent } from 'vue'
import { ref } from 'vue'


export default /*#__PURE__*/_defineComponent({
  props: {
    msg: { type: String, required: true }
  },
  setup(__props: any, { expose: __expose }) {
  __expose();



const count = ref(0)

function inc() {
  count.value++
}

const __returned__ = { count, inc }
Object.defineProperty(__returned__, '__isScriptSetup', { enumerable: false, value: true })
return __returned__
}

})"
`;

exports[`compile > hello world use plugin > style 1`] = `
"
.read-the-docs {
  color: #888;
}
"
`;

exports[`compile > hello world use plugin > template 1`] = `
"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveDirective as _resolveDirective, openBlock as _openBlock, createElementBlock as _createElementBlock, withDirectives as _withDirectives, Fragment as _Fragment } from "vue"

const _hoisted_1 = { class: "card" }

export function render(_ctx, _cache) {
  const _directive_throttle = _resolveDirective("throttle")

  return (_openBlock(), _createElementBlock(_Fragment, null, [
    _createElementVNode("h1", null, _toDisplayString(_ctx.msg), 1 /* TEXT */),
    _createElementVNode("div", _hoisted_1, [
      _withDirectives((_openBlock(), _createElementBlock("button", {
        type: "button",
        onClick: _cache[0] || (_cache[0] = $event => (_ctx.count++)),
        onDblclick: _cache[1] || (_cache[1] = $event => (_ctx.count += 2))
      }, [
        _createTextVNode(" raw count is " + _toDisplayString(_ctx.count), 1 /* TEXT */)
      ], 32 /* NEED_HYDRATION */)), [
        [_directive_throttle]
      ]),
      _withDirectives((_openBlock(), _createElementBlock("button", {
        type: "button",
        onClick: _cache[2] || (_cache[2] = (...args) => (_ctx.inc && _ctx.inc(...args)))
      }, [
        _createTextVNode(" inc count is " + _toDisplayString(_ctx.count), 1 /* TEXT */)
      ])), [
        [_directive_throttle]
      ])
    ])
  ], 64 /* STABLE_FRAGMENT */))
}"
`;
